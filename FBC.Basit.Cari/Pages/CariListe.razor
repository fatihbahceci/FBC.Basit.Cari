@page "/"
@using Microsoft.EntityFrameworkCore;
@using FBC.Components
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Cari Liste</PageTitle>

<AuthorizeView Roles="CanEditData">
    @if (cariKartIdOnly == null)
    {
        <div class=row>
            <div class="container px-5 my-5">
                <div class="form-floating mb-3">
                    <input class="form-control" @bind="yeniCariIsim" id="cariIsim" type="text" placeholder="Cari İsim" data-sb-validations="" />
                    <label for="cariIsim">Cari İsim</label>
                </div>
                <div class="d-grid">
                    <button class="btn btn-primary btn-lg" id="submitButton" @onclick="Ekle">Ekle</button>
                </div>
            </div>
        </div>
    }
</AuthorizeView>
@if (liste == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var toplamBorc = liste.Sum(x => x.Borc);
    var toplamAlacak = liste.Sum(x => x.Alacak);
    <div class="row">
        <CheckBox @bind-Data="bakiyesiOlmayanlariGizle" Title="Bakiyesi olmayanları gizle" />
    </div>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>İsim</th>
                <th>Borç</th>
                <th>Alacak</th>
                <th>Bakiye</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in liste)
            {
                if (!bakiyesiOlmayanlariGizle || (bakiyesiOlmayanlariGizle && item.Bakiye != 0))
                {
                    <tr>
                        <td>@item.CariKartId</td>
                        <td>@item.Isim</td>
                        <td>@($"₺{item.Borc:n}")</td>
                        <td>@($"₺{item.Alacak:n}")</td>
                        <td>@($"₺{item.Bakiye:n}")</td>
                        <td>
                            <a href="/cari/goster/@item.CariKartId" class="btn btn-primary">Aç</a>

                            <AuthorizeView Roles="CanEditData">
                                @if (cariKartIdOnly == null)
                                {
                                    <a href="javascript:void();" class="btn btn-danger" @onclick="() => ShowSilDlg(item.CariKartId)">Sil</a>
                                }
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />



    <AuthorizeView Roles="CanEditData">
        @if (cariKartIdOnly == null)
        {
            <ModalForm @ref="silDlg" Title="Silme işlemini onayla">
                <Body>
                    @{
                        var titleText = $"Silinecek Kaydın ID'sini <span class='btn btn-danger'>{silinecekId}</span> buraya tekrar yazın";
                    }
                    <TextBox @bind-Data="silinecekIdValidate" Title="@titleText" />
                </Body>
                <Footer>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Sil">Sil</button>
                </Footer>
            </ModalForm>
        }
    </AuthorizeView>
}
@code {

    class CariOzet
    {
        public int CariKartId { get; set; }
        public string Isim { get; set; }
        public decimal Borc { get; set; }
        public decimal Alacak { get; set; }
        public decimal Bakiye { get => Alacak - Borc; }

    }

    private List<CariOzet>? liste;
    private string yeniCariIsim;
    private bool bakiyesiOlmayanlariGizle;
    ModalForm silDlg;
    private int silinecekId = -1;
    private int silinecekIdValidate = 0;
    private int? cariKartIdOnly = null;

    private async Task<int?> getCariKartIdOnly()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string id = user.FindFirst(c => c.Type == "CariKartId")?.Value;

            if (!string.IsNullOrEmpty(id))
            {
                return int.Parse(id);
            }
        }
        return null;
    }

    private void ShowSilDlg(int id)
    {
        silinecekId = id;
        silDlg.Open();
    }

    private void Sil()
    {
        if (silinecekIdValidate == silinecekId)
        {
            using (var db = new DB())
            {
                var har = db.CariHareket.Where(x => x.CariKartId == silinecekId);
                db.CariHareket.RemoveRange(har);
                var kart = db.CariKart.Where(x => x.CariKartId == silinecekId);
                db.CariKart.RemoveRange(kart);
                db.SaveChanges();
            }
            silinecekId = -1;
            silinecekIdValidate = 0;
            silDlg.Close();
            RefreshList();
        }

    }

    private void Ekle()
    {
        if (!string.IsNullOrEmpty(yeniCariIsim))
        {
            using (var db = new DB())
            {

                db.CariKart.Add(new CariKart() { Isim = yeniCariIsim });
                db.SaveChanges();

                yeniCariIsim = null;
                //InvokeAsync(() => RefreshList());
            }
            RefreshList();
        }
        else
        {

        }
    }

    private void RefreshList()
    {

        using (var db = new DB())
        {
            liste =
            (
                cariKartIdOnly != null
                    ? db.CariKart.AsNoTracking().Include(p => p.Hareketler).Where(x => x.CariKartId == cariKartIdOnly)//.OrderBy(x=> x.Isim)
                    : db.CariKart.AsNoTracking().Include(p => p.Hareketler)//.OrderBy(x=> x.Isim)
            )
            .ToList() // NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.
            .Select(x => new CariOzet()
                {
                    CariKartId = x.CariKartId,
                    Isim = x.Isim,
                    Borc = x.Hareketler.Sum(x => x.Borc),
                    Alacak = x.Hareketler.Sum(x => x.Alacak)
                }).OrderByDescending(p => p.Bakiye).ThenBy(p => p.Isim).ToList();
            InvokeAsync(() => StateHasChanged());

        }
    }

    protected override async Task OnInitializedAsync()
    {
        cariKartIdOnly = await getCariKartIdOnly();
        RefreshList();
    }
}
