@page "/"
@using Microsoft.EntityFrameworkCore;
<PageTitle>Cari Liste</PageTitle>


<div class=row>

    <div class="container px-5 my-5">
        <div class="form-floating mb-3">
            <input class="form-control" @bind="yeniCariIsim" id="cariIsim" type="text" placeholder="Cari İsim" data-sb-validations="" />
            <label for="cariIsim">Cari İsim</label>
        </div>

        <div class="d-grid">
            <button class="btn btn-primary btn-lg" id="submitButton" @onclick="Ekle">Ekle</button>
        </div>
    </div>
</div>
@if (liste == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <CheckBox @bind-Data="bakiyesiOlmayanlariGizle" Title="Bakiyesi olmayanları gizle" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>İsim</th>
                <th>Borç</th>
                <th>Alacak</th>
                <th>Bakiye</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in liste)
            {
                if (!bakiyesiOlmayanlariGizle || (bakiyesiOlmayanlariGizle && item.Bakiye != 0))
                {
                    <tr>
                        <td>@item.CariKartId</td>
                    <td>@item.Isim</td>
                    <td>@($"₺{item.Borc:n}")</td>
                    <td>@($"₺{item.Alacak:n}")</td>
                    <td>@($"₺{item.Bakiye:n}")</td>
                    <td><a href="/cari/goster/@item.CariKartId">Aç</a></td>
                </tr>
                }
            }
        </tbody>
    </table>
   <div class="container px-5 my-5">
            @{
                var toplamBorc = liste.Sum(x => x.Borc);
                var toplamAlacak = liste.Sum(x => x.Alacak);
            }
            <table class="table">
                <tr>
                    <th>Toplam Borç</th>
                    <td style="text-align: right">@($"₺{toplamBorc:n}")</td>
                </tr>
                <tr>
                    <th>Toplam Alacak</th>
                    <td style="text-align: right">@($"₺{toplamBorc:n}")</td>
                </tr>
                <tr>
                    <th>Bakiye</th>
                    <td style="text-align: right">@($"₺{(toplamAlacak - toplamBorc):n}")</td>
                </tr>
            </table>
        </div>
}

@code {

    class CariOzet
    {
        public int CariKartId { get; set; }
        public string Isim { get; set; }
        public decimal Borc { get; set; }
        public decimal Alacak { get; set; }
        public decimal Bakiye { get => Alacak - Borc; }

    }

    private List<CariOzet>? liste;
    private string yeniCariIsim;
    private bool bakiyesiOlmayanlariGizle;

    private void Ekle()
    {
        if (!string.IsNullOrEmpty(yeniCariIsim))
        {
            using (var db = new DB())
            {

                db.CariKart.Add(new CariKart() { Isim = yeniCariIsim });
                db.SaveChanges();

                yeniCariIsim = null;
                //InvokeAsync(() => RefreshList());
            }
            RefreshList();
        }
        else
        {

        }
    }

    private void RefreshList()
    {

        using (var db = new DB())
        {
            liste = db.CariKart.AsNoTracking().Include(p => p.Hareketler)//.OrderBy(x=> x.Isim)
            .ToList() // NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.
            .Select(x => new CariOzet()
                {
                    CariKartId = x.CariKartId,
                    Isim = x.Isim,
                    Borc = x.Hareketler.Sum(x => x.Borc),
                    Alacak = x.Hareketler.Sum(x => x.Alacak)
                }).OrderByDescending(p => p.Bakiye).ToList();
            InvokeAsync(() => StateHasChanged());

        }
    }

    protected override async Task OnInitializedAsync()
    {
        RefreshList();
    }
}
