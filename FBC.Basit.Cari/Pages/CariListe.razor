@page "/"
@using Microsoft.EntityFrameworkCore;
@using FBC.Components
@inject IJSRuntime JS

<PageTitle>Cari Liste</PageTitle>
<div id="top"/>
<AuthorizeView Roles="CanEditData">
    @if (cariKartIdOnly == null)
    {
        <CariEkleDuzenle @bind-Model="cariKart" SaveClick="Kaydet" CancelClick="Vazgec" />
        if (!string.IsNullOrEmpty(cariKartHata))
        {
            <div class="alert alert-danger" role="alert">
                @cariKartHata
            </div>
        }
    }
</AuthorizeView>
@if (liste == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var toplamBorc = liste.Sum(x => x.Borc);
    var toplamAlacak = liste.Sum(x => x.Alacak);
    <div class="row">
        <CheckBox @bind-Data="bakiyesiOlmayanlariGizle" Title="Bakiyesi olmayanları gizle" />
    </div>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>İsim</th>
                <th>Borç</th>
                <th>Alacak</th>
                <th>Bakiye</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in liste)
            {
                if (!bakiyesiOlmayanlariGizle || (bakiyesiOlmayanlariGizle && item.Bakiye != 0))
                {
                    bool hasNote = !string.IsNullOrEmpty(item.Notlar);
                    <tr>
                        <td rowspan="@(hasNote ? "2" : "")">@item.CariKartId</td>
                        <td>@item.Isim</td>
                        <td>@($"₺{item.Borc:n}")</td>
                        <td>@($"₺{item.Alacak:n}")</td>
                        <td>@($"₺{item.Bakiye:n}")</td>
                        <td rowspan="@(hasNote ? "2" : "")">
                            <a href="/cari/goster/@item.CariKartId" class="btn btn-primary">Aç</a>

                            <AuthorizeView Roles="CanEditData">
                                @if (cariKartIdOnly == null)
                                {
                                    <a href="javascript:void();" class="btn btn-danger" @onclick="() => ShowSilDlg(item.CariKartId)">Sil</a>
                                    <a href="javascript:void();" class="btn btn-secondary" @onclick="() => Duzenle(item)">Düzenle</a>
                                }
                            </AuthorizeView>
                        </td>
                    </tr>
                    if (hasNote)
                    {
                        <tr>
                            <td colspan="4">Notlar:     @item.Notlar</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

    <AuthorizeView Roles="CanEditData">
        @if (cariKartIdOnly == null)
        {
            <ModalForm @ref="silDlg" Title="Silme işlemini onayla">
                <Body>
                    @{
                        var titleText = $"Silinecek Kaydın ID'sini <span class='btn btn-danger'>{silinecekId}</span> buraya tekrar yazın";
                    }
                    <TextBox @bind-Data="silinecekIdValidate" Title="@titleText" />
                </Body>
                <Footer>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Sil">Sil</button>
                </Footer>
            </ModalForm>
        }
    </AuthorizeView>
}
@code {

    class CariOzet
    {
        public int CariKartId { get; set; }
        public string Isim { get; set; }
        public string? Notlar { get; set; }
        public decimal Borc { get; set; }
        public decimal Alacak { get; set; }
        public decimal Bakiye { get => Alacak - Borc; }

    }

    private List<CariOzet>? liste;
    private CariKart cariKart = new CariKart();
    private string? cariKartHata = null;
    private bool bakiyesiOlmayanlariGizle;
    ModalForm silDlg;
    private int silinecekId = -1;
    private int silinecekIdValidate = 0;

    [CascadingParameter(Name = "userCariKartId")]
    private int? cariKartIdOnly { get; set; }


    private void ShowSilDlg(int id)
    {
        silinecekId = id;
        silDlg.Open();
    }

    private void Sil()
    {
        if (silinecekIdValidate == silinecekId)
        {
            using (var db = new DB())
            {
                var har = db.CariHareket.Where(x => x.CariKartId == silinecekId);
                db.CariHareket.RemoveRange(har);
                var kart = db.CariKart.Where(x => x.CariKartId == silinecekId);
                db.CariKart.RemoveRange(kart);
                db.SaveChanges();
            }
            silinecekId = -1;
            silinecekIdValidate = 0;
            silDlg.Close();
            RefreshList();
        }

    }

    private void Duzenle(CariOzet ozet)
    {
        cariKart = new CariKart() { CariKartId = ozet.CariKartId, Isim = ozet.Isim, Notlar = ozet.Notlar };
        JS.InvokeVoidAsync("jump", "top");
    }

    private void Vazgec()
    {
        cariKart = new CariKart();
        cariKartHata = null;
    }

    private void Kaydet()
    {
        if (string.IsNullOrEmpty(cariKart.Isim?.Trim()))
        {
            cariKartHata = "İsim boş olamaz!";
        }
        else
        if (cariKart.CariKartId > 0)
        {
            using (var db = new DB())
            {
                var exists = (from x in db.CariKart where x.CariKartId == cariKart.CariKartId select x).FirstOrDefault();
                if (exists != null)
                {
                    exists.Isim = cariKart.Isim;
                    exists.Notlar = cariKart.Notlar;
                    db.SaveChanges();
                    cariKart = new CariKart();
                    cariKartHata = null;
                    RefreshList();
                }
                else
                {
                    cariKartHata = "Kayıt bulunamadı. Önceden başka bir kullanıcı tarafından silinmiş olabilir";
                }
            }
        }
        else
        {
            using (var db = new DB())
            {
                db.CariKart.Add(cariKart);
                db.SaveChanges();
                cariKart = new CariKart();
                cariKartHata = null;
                RefreshList();
            }
        }
    }

    private void RefreshList()
    {

        using (var db = new DB())
        {
            liste =
            (
                cariKartIdOnly != null
                    ? db.CariKart.AsNoTracking().Include(p => p.Hareketler).Where(x => x.CariKartId == cariKartIdOnly)//.OrderBy(x=> x.Isim)
                    : db.CariKart.AsNoTracking().Include(p => p.Hareketler)//.OrderBy(x=> x.Isim)
            )
            .ToList() // NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.
            .Select(x => new CariOzet()
                {
                    CariKartId = x.CariKartId,
                    Isim = x.Isim,
                    Notlar = x.Notlar,
                    Borc = x.Hareketler.Sum(x => x.Borc),
                    Alacak = x.Hareketler.Sum(x => x.Alacak)
                }).OrderByDescending(p => p.Bakiye).ThenBy(p => p.Isim).ToList();
            InvokeAsync(() => StateHasChanged());

        }
    }

    protected override async Task OnInitializedAsync()
    {
        RefreshList();
    }
}
