@page "/"
@using Microsoft.EntityFrameworkCore;
@using FBC.Components
@inject IJSRuntime JS
@inject NotificationService NTF
@inject DialogService DLG
@inject NavigationManager NAV

<div id="top" />
<PageTitle>Cari Liste</PageTitle>
<AuthorizeView Roles="CanEditData">
    @if (cariKartIdOnly == null)
    {
        <CariEkleDuzenle @bind-Model="cariKart" SaveClick="Kaydet" CancelClick="Vazgec" />
        if (!string.IsNullOrEmpty(cariKartHata))
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" Severity="AlertSeverity.Error" AllowClose="false">
                @cariKartHata

            </RadzenAlert>
        }
    }
</AuthorizeView>


<CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

<RadzenDataGrid @ref="grid"
                TItem="CariOzet"
                Data="@liste"
                Count="@listeTotalCount"
                LoadData="LoadData"
                AllowSorting="true"
                FilterMode="FilterMode.Simple"
                AllowFiltering="true"
                AllowColumnPicking="false"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Center"
                PageSizeOptions="new int[]{10,20,50,100,500}"
                PagerPosition="PagerPosition.TopAndBottom"
                PageSize="20"
                ShowPagingSummary="true">
    <Columns>
        <RadzenDataGridColumn TItem="CariOzet" Property="CariKartId" Width="100px" Title="Id" Filterable="false" />
        <RadzenDataGridColumn TItem="CariOzet" Property="Isim" Title="İsim" Filterable="false">
            <Template Context="item">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                    @if (!string.IsNullOrEmpty(item.Notlar))
                    {
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-0">@item.Isim</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" class="rz-mb-0"><strong>Notlar:</strong> @item.Notlar</RadzenText>
                        </RadzenStack>
                    }
                    else
                    {
                        <RadzenText>@item.Isim</RadzenText>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CariOzet" Property="ReelBorc" Width="100px" FormatString="{0:C}" Title="Borç" Filterable="false" />
        <RadzenDataGridColumn TItem="CariOzet" Property="ReelAlacak" Width="100px" FormatString="{0:C}" Title="Alacak" Filterable="false" />
        <RadzenDataGridColumn TItem="CariOzet" Property="ReelBakiye" Width="100px" FormatString="{0:C}" Title="Bakiye" Filterable="true">
            <FilterTemplate>
                <RadzenCheckBox TValue="bool" Change="@BakiyesiOlmayanlariGizle" Text="Bakiyesi olmayanları gizle" Name="CBBG" />
                <RadzenLabel Text="Bakiye <> 0" Component="CBBG" class="rz-ms-2" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CariOzet" Title="İşlemler" Width="200px" Pickable="false" Filterable="false">
            <Template Context="item">
                <RadzenSplitButton Text="Görüntüle" Click="@(s => Act(s?.Value ?? "O" , item.CariKartId))">
                    <ChildContent>
                        <RadzenSplitButtonItem Text="Görüntüle" Value="O" />
                        <AuthorizeView Roles="CanEditData">
                            @if (cariKartIdOnly == null)
                            {
                                <RadzenSplitButtonItem Text="Sil" Value="D" />
                                <RadzenSplitButtonItem Text="Düzenle" Value="E" />
                            }
                        </AuthorizeView>
                    </ChildContent>
                </RadzenSplitButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>
<CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

@code {
    RadzenDataGrid<CariOzet>? grid;
    private List<CariOzet>? liste;
    private int listeTotalCount = 0;
    private decimal toplamBorc = 0;
    private decimal toplamAlacak = 0;
    private CariKart cariKart = new CariKart();
    private string? cariKartHata = null;
    private bool bakiyesiOlmayanlariGizle;

    [CascadingParameter(Name = "userCariKartId")]
    private int? cariKartIdOnly { get; set; }
    private void BakiyesiOlmayanlariGizle(bool paca)
    {
        bakiyesiOlmayanlariGizle = paca;
        grid?.Reload();
    }

    private async Task Act(string act, int id)
    {
        switch (act)
        {
            case "O":
                NAV.NavigateTo($"/cari/goster/{id}");
                break;
            case "D":
                await ShowSilDlg(id);
                break;
            case "E":
                Duzenle(liste!.First(x => x.CariKartId == id));
                break;
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        await Task.Yield();
        try
        {

            using (var db = new DB())
            {
                var all =
                (
                    cariKartIdOnly != null
                        ? db.CariKart.AsNoTracking().Include(p => p.Hareketler).ThenInclude(p => p.DovizKuru).Where(x => x.CariKartId == cariKartIdOnly)//.OrderBy(x=> x.Isim)
                        : db.CariKart.AsNoTracking().Include(p => p.Hareketler).ThenInclude(p => p.DovizKuru)//.OrderBy(x=> x.Isim)
                )
                .ToList() // NotSupportedException: SQLite cannot apply aggregate operator 'Sum' on expressions of type 'decimal'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.
                          // .SelectMany(x => x.Hareketler)
                          // .Select(x=> new CariHareketWrapper(x))
                .Select(x =>
                {
                    var wh = x.Hareketler.Select(x => new CariHareketWrapper(x)).ToList();

                    var r = new CariOzet()
                        {
                            CariKartId = x.CariKartId,
                            Isim = x.Isim,
                            Notlar = x.Notlar,
                            Borc = wh.Sum(x => x.Borc),
                            Alacak = wh.Sum(x => x.Alacak),
                            ReelBorc = wh.Sum(x => x.BorcDovizSatis),
                            ReelAlacak = wh.Sum(x => x.AlacakDovizSatis)
                        };
                    return r;
                }).OrderByDescending(p => p.Bakiye).ThenBy(p => p.Isim).ToList();
                listeTotalCount = all.Count;
                toplamBorc = all.Sum(x => x.ReelBorc);
                toplamAlacak = all.Sum(x => x.ReelAlacak);
                if (bakiyesiOlmayanlariGizle)
                {
                    all = all.Where(x => x.ReelBakiye != 0).ToList();
                    listeTotalCount = all.Count;
                }
                liste = all.Skip(args.Skip ?? 0).Take(args.Top ?? int.MaxValue).ToList();
            }
        }
        catch (Exception exc)
        {
            liste = new List<CariOzet>();
            NTF.Notify(NotificationSeverity.Error, "Hata!", exc.Message);
        }
    }

    class CariOzet
    {
        public int CariKartId { get; set; }
        public string Isim { get; set; }
        public string? Notlar { get; set; }
        public decimal Borc { get; set; }
        public decimal Alacak { get; set; }
        public decimal Bakiye { get => Alacak - Borc; }
        public decimal ReelBorc { get; set; }
        public decimal ReelAlacak { get; set; }
        public decimal ReelBakiye { get => ReelAlacak - ReelBorc; }

    }

    private async Task ShowSilDlg(int id)
    {
        if (cariKartIdOnly != null)
        {
            NTF.Notify(NotificationSeverity.Error, "Hata!", "Yetkiniz yok!");
            return;
        }
        var r = await DLG.OpenAsync<FBC.Components.ConfirmDeleteDlg>(
            "Silmek istediğinize emin misiniz?",
            new Dictionary<string, object> { { "Id", id } });
        try
        {
            if (r is bool b == true)
            {
                using (var db = new DB())
                {
                    //TODO Kullanıcı ile ilişkilendirilmişse FOREIGN KEY hatası verecektir.
                    var har = db.CariHareket.Where(x => x.CariKartId == id);
                    db.CariHareket.RemoveRange(har);
                    var kart = db.CariKart.Where(x => x.CariKartId == id);
                    db.CariKart.RemoveRange(kart);
                    db.SaveChanges();
                }
                grid?.Reload();
                NTF.Notify(NotificationSeverity.Success, "Başarılı", "Kayıt silindi");
            }
        }
        catch (Exception exc)
        {
            NTF.Notify(NotificationSeverity.Error, "Hata!", exc.Message);
        }
    }

    private void Duzenle(CariOzet ozet)
    {
        cariKart = new CariKart() { CariKartId = ozet.CariKartId, Isim = ozet.Isim, Notlar = ozet.Notlar };
        JS.InvokeVoidAsync("jump", "top");
    }

    private void Vazgec()
    {
        cariKart = new CariKart();
        cariKartHata = null;
    }

    private void Kaydet()
    {
        if (string.IsNullOrEmpty(cariKart.Isim?.Trim()))
        {
            cariKartHata = "İsim boş olamaz!";
        }
        else
        if (cariKart.CariKartId > 0)
        {
            using (var db = new DB())
            {
                var exists = (from x in db.CariKart where x.CariKartId == cariKart.CariKartId select x).FirstOrDefault();
                if (exists != null)
                {
                    exists.Isim = cariKart.Isim;
                    exists.Notlar = cariKart.Notlar;
                    db.SaveChanges();
                    cariKart = new CariKart();
                    cariKartHata = null;
                    grid?.Reload();
                }
                else
                {
                    cariKartHata = "Kayıt bulunamadı. Önceden başka bir kullanıcı tarafından silinmiş olabilir";
                }
            }
        }
        else
        {
            using (var db = new DB())
            {
                db.CariKart.Add(cariKart);
                db.SaveChanges();
                cariKart = new CariKart();
                cariKartHata = null;
                grid?.Reload();
            }
        }
    }




}
