@page "/cari/goster/{Id:int}"
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@using FBC.Components;
@inject IJSRuntime JS
@inject NotificationService NTF
@inject DialogService DLG


@if (cariKart == null)
{
    <PageTitle>Cari Göster - Kayıt Bulunamadı!</PageTitle>
    <h1>Kayıt Bulunamadı!</h1>
}
else
{
    <PageTitle>@cariKart.Isim - Cari Göster</PageTitle>
    <h1>@cariKart.Isim</h1>
    if (!string.IsNullOrEmpty(cariKart.Notlar))
    {
        <div class="d-print-none">
            <h2>Notlar:</h2>
            <pre>@cariKart.Notlar</pre>
        </div>
    }

    <id id="cariekle" />
    <AuthorizeView Roles="CanEditData">
        <div class="container px-5 my-5 d-print-none">
            <div class="row">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                    <RadzenLabel Text="Tarih" />

                    <RadzenDatePicker @bind-Value="hareket.Tarih" Title="Tarih" DateFormat="d" Style="width: 100%" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                    <RadzenLabel Text="Vade Tarihi" />
                    <RadzenDatePicker @bind-Value="hareket.VadeTarihi" Title="Vade Tarihi" DateFormat="d" Style="width: 100%" />
                </RadzenStack>
            </div>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                <RadzenLabel Text="Açıklama" />
                <RadzenTextBox @bind-Value="hareket.Aciklama" Placeholder="Açıklama" Style="width: 100%" />
            </RadzenStack>
            <div class="row">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                    <RadzenLabel Text="Borç" />
                    <RadzenNumeric @bind-Value="hareket.Borc" Title="Borç" Style="width: 100%" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                    <RadzenLabel Text="Alacak" />
                    <RadzenNumeric @bind-Value="hareket.Alacak" Title="Alacak" Style="width: 100%" />
                </RadzenStack>
            </div>

            <div class="row">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
                    <RadzenLabel Text="Döviz Kuru" Style="width: 25%" />
                    <RadzenDropDown @bind-Value="hareket.DovizKuruId"
                                    Data="@dovizKurlari"
                                    ValueProperty="@nameof(DovizKuru.DovizKuruId)"
                                    TextProperty="@nameof(DovizKuru.DovizAdi)"
                                    Style="width: 75%"
                                    Title="Döviz Kuru">
                        <Template Context="x">
                            @((x as DovizKuru)!.DovizAdi) (@((x as DovizKuru)!.DovizCinsi))
                        </Template>
                        @*   <ValueTemplate Context="x">
                    @(x as DovizKuru).DovizAdi (@(x as DovizKuru).DovizCinsi) Paça
                    </ValueTemplate> *@
                    </RadzenDropDown>
                </RadzenStack>
            </div>
            <RadzenStack Orientation="Orientation.Horizontal">
                @if (hareket.CariHareketId > 0)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="Yeni">Yeni</RadzenButton>
                }
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="Kaydet">@(hareket.CariHareketId > 0 ? "Kaydet" : "Ekle")</RadzenButton>
            </RadzenStack>

            @if (!string.IsNullOrEmpty(hata))
            {
                <div class="alert alert-danger" role="alert">
                    @hata
                </div>
            }
        </div>
    </AuthorizeView>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

    <RadzenDataGrid @ref="grid"
                    TItem="CariHareketWrapper"
                    Data="@hareketler"
                    Count="@listeTotalCount"
                    LoadData="LoadData"
                    AllowSorting="true"
                    FilterMode="FilterMode.Simple"
                    AllowFiltering="true"
                    AllowColumnPicking="false"
                    AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    PageSizeOptions="new int[]{10,20,50,100,500}"
                    PagerPosition="PagerPosition.TopAndBottom"
                    PageSize="20"
                    ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="CariHareketId" Width="100px" Title="Id" Filterable="false" />
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="Tarih" FormatString="{0:d}" Width="100px" Title="Tarih" Filterable="false" />
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="Aciklama" Title="Aciklama" Filterable="false" />
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="Borc" Width="100px" FormatString="{0:C}" Title="Borc" Filterable="false" />
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="Alacak" Width="100px" FormatString="{0:C}" Title="Alacak" Filterable="false" />
            <RadzenDataGridColumn TItem="CariHareketWrapper" Property="VadeTarihi" FormatString="{0:d}" Width="100px" Title="VadeTarihi" Filterable="false" />
            <AuthorizeView Roles="CanEditData">
                <RadzenDataGridColumn TItem="CariHareketWrapper" Title="İşlemler" Width="200px" Pickable="false" Filterable="false">
                    <Template Context="item">
                        <RadzenSplitButton Text="Düzenle" Click="@(s => Act(s?.Value ?? "E" , item.CariHareketId))">
                            <ChildContent>
                                <RadzenSplitButtonItem Text="Düzenle" Value="E" />
                                <RadzenSplitButtonItem Text="Sil" Value="D" />
                            </ChildContent>
                        </RadzenSplitButton>
                    </Template>
                </RadzenDataGridColumn>
            </AuthorizeView>
        </Columns>
    </RadzenDataGrid>

    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" ExtraClass="d-print-none" />
}

@*https://www.meziantou.net/anchor-navigation-in-a-blazor-application.htm*@


@code {
    RadzenDataGrid<CariHareketWrapper>? grid;

    [Parameter]
    public int Id { get; set; }
    private CariKart? cariKart;
    private List<CariHareketWrapper>? hareketler;
    private int listeTotalCount;
    private List<DovizKuru>? dovizKurlari;
    private CariHareket hareket = new CariHareket();
    private string? hata;

    [CascadingParameter(Name = "userCariKartId")]
    private int? cariKartIdOnly { get; set; }

    decimal toplamBorc = 0; //hareketler.Sum(x => x.BorcDovizSatis);
    decimal toplamAlacak = 0; //hareketler.Sum(x => x.AlacakDovizSatis);


    protected override void OnInitialized()
    {
        using (var db = new DB())
        {
            dovizKurlari = db.DovizKuru.AsNoTracking().ToList();
            dovizKurlari.Insert(0, new DovizKuru() { DovizKuruId = 0, DovizAdi = "TL", DovizCinsi = "TRY" });
            cariKart =
            (
                cariKartIdOnly != null
                    ? db.CariKart.AsNoTracking().Where(x => x.CariKartId == cariKartIdOnly)
                    : db.CariKart.AsNoTracking()
            )
            // .Include(x => x.Hareketler)
            .Where(x => x.CariKartId == Id)
            .FirstOrDefault();
        }
    }

    private async Task Act(string act, int id)
    {
        switch (act)
        {
            case "D":
                await ShowSilDlg(id);
                break;
            case "E":
                Duzenle(id);
                break;
        }
        await Task.Yield();
    }

    async Task LoadData(LoadDataArgs args)
    {
        await Task.Yield();
        try
        {

            using (var db = new DB())
            {

                if (cariKart != null)
                {
                    var all = db.CariHareket
                        .Where(x => x.CariKartId == cariKart.CariKartId)
                        .Include(x => x.DovizKuru)
                        .OrderByDescending(x => x.Tarih)
                        .ThenBy(x => x.VadeTarihi)
                        .ThenByDescending(x => x.CariHareketId)
                        .Select(x => new CariHareketWrapper(x))
                        .ToList();

                    listeTotalCount = all.Count;
                    toplamBorc = all.Sum(x => x.BorcDovizSatis);
                    toplamAlacak = all.Sum(x => x.AlacakDovizSatis);
                    // if (bakiyesiOlmayanlariGizle)
                    // {
                    //     all = all.Where(x => x.ReelBakiye != 0).ToList();
                    //     listeTotalCount = all.Count;
                    // }
                    hareketler = all.Skip(args.Skip ?? 0).Take(args.Top ?? int.MaxValue).ToList();
                };
            }
        }
        catch (Exception exc)
        {
            hareketler = new List<CariHareketWrapper>();
            NTF.Notify(NotificationSeverity.Error, "Hata!", exc.Message);
        }
    }


    private async Task ShowSilDlg(int id)
    {
        if (cariKartIdOnly != null)
        {
            NTF.Notify(NotificationSeverity.Error, "Hata!", "Yetkiniz yok!");
            return;
        }
        var r = await DLG.OpenAsync<FBC.Components.ConfirmDeleteDlg>(
            "Silmek istediğinize emin misiniz?",
            new Dictionary<string, object> { { "Id", id } });
        try
        {
            if (r is bool b && b == true)
            {
                using (var db = new DB())
                {
                    var har = db.CariHareket.Where(x => x.CariHareketId == id);
                    db.CariHareket.RemoveRange(har);
                    db.SaveChanges();
                }
                grid?.Reload();
                NTF.Notify(NotificationSeverity.Success, "Başarılı", "Kayıt silindi");
            }
        }
        catch (Exception exc)
        {
            NTF.Notify(NotificationSeverity.Error, "Hata!", exc.Message);
        }
    }




    private void Duzenle(int id)
    {
        hata = null;
        hareket = hareketler!.First(x => x.CariHareketId == id).ToCariHareket();
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
        JS.InvokeVoidAsync("jump", "cariekle");
    }

    private void Yeni()
    {
        hareket = new CariHareket();
        hata = null;

    }

    private void Kaydet()
    {
        hata = null;
        if (hareket == null || cariKart == null)
        {
            hata = $"Ri tı siya-o h:{hareket == null} m:{cariKart == null}";
        }
        else if (hareket.Borc <= 0 && hareket.Alacak <= 0)
        {
            hata = "Borç veya alacak belirtiniz.";
        }
        else if (hareket.Tarih == null)
        {
            hata = "Tarih belirtiniz";
        }
        else if (hareket.VadeTarihi != null && hareket.VadeTarihi < hareket.Tarih)
        {
            hata = "Vade tarihi işlem tarihinden eski olamaz!";
        }
        else
        {
            if (hareket.CariHareketId > 0)
            {
                hareket.CariKartId = cariKart.CariKartId;
                using (var db = new DB())
                {
                    var exists = db.CariHareket.FirstOrDefault(x => x.CariHareketId == hareket.CariHareketId);
                    if (exists != null)
                    {
                        exists.Fill(hareket);
                        db.SaveChanges();
                    }
                    else
                    {
                        hata = "Kayıt bulunamadı! Başka bir ekranda veya kullanıcı tarafından silinmiş olabilir...";
                    }
                }
            }
            else
            {
                hareket.CariKartId = cariKart.CariKartId;
                using (var db = new DB())
                {
                    db.CariHareket.Add(hareket);
                    db.SaveChanges();
                }
            }
            NTF.Notify(NotificationSeverity.Success, "Başarılı", "Bilgiler kaydedildi");
            hata = null;
            Yeni();
            grid?.Reload();

        }

    }
}
