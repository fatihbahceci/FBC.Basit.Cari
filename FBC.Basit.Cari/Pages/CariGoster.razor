@page "/cari/goster/{Id:int}"
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@using FBC.Components;
@inject IJSRuntime JS


@if (cariKart == null)
{
    <PageTitle>Cari Göster - Kayıt Bulunamadı!</PageTitle>
    <h1>Kayıt Bulunamadı!</h1>
}
else
{
    var toplamBorc = hareketler.Sum(x => x.BorcDovizSatis);
    var toplamAlacak = hareketler.Sum(x => x.AlacakDovizSatis);

    <PageTitle>@cariKart.Isim - Cari Göster</PageTitle>
    <h1>@cariKart.Isim</h1>
    if (!string.IsNullOrEmpty(cariKart.Notlar))
    {
       <div class="d-print-none">
          <h2>Notlar:</h2>
          <pre>@cariKart.Notlar</pre>
       </div>
    }
<!-- 
       public int CariHareketId { get; set; }
        public DateTime? Tarih { get; set; }
        public string? Aciklama { get; set; }
        public string? EvrakNo { get; set; }
        public decimal Borc { get; set; }
        public decimal Alacak { get; set; }
        public DateTime? VadeTarihi { get; set; }
        public int CariKartId { get; set; }
        public int? DovizKuruId { get; set; }
        public decimal DovizKuruAlis { get; set; }
        public decimal DovizKuruSatis { get; set; }
        public string DovizCinsi { get; set; }
        public string DovizAdi { get; set; }
        public DateTime DovizGuncellemeTarihi { get; set; }
        public decimal BorcDovizAlis { get => Borc * DovizKuruAlis; }
        public decimal BorcDovizSatis { get => Borc * DovizKuruSatis; }
        public decimal AlacakDovizAlis { get => Alacak * DovizKuruAlis; }
        public decimal AlacakDovizSatis { get => Alacak * DovizKuruSatis; }

-->
    <id id="cariekle" />
    <AuthorizeView Roles="CanEditData">
        <div class="container px-5 my-5 d-print-none">
            <div class="row">
                <DatePicker @bind-Data="hareket.Tarih" FormPanelExtraClass="col" Title="Tarih" />
                <DatePicker @bind-Data="hareket.VadeTarihi" FormPanelExtraClass="col" Title="VadeTarihi" />
            </div>
            <TextBox @bind-Data="hareket.Aciklama" Title="Aciklama" />
            <div class="row">
                <TextBox @bind-Data="hareket.Borc" FormPanelExtraClass="col" Title="Borc" />
                <TextBox @bind-Data="hareket.Alacak" FormPanelExtraClass="col" Title="Alacak" />
            </div>

            <div>
                  <DovizSecCombo @bind-Data="hareket.DovizKuruId" Collection="dovizKurlari" Title="Döviz Kuru" />
            </div>

            <div class="d-grid">
            @if (hareket.CariHareketId > 0)
            {
                <button class="btn alert-secondary btn-lg py-1" id="submitButton" @onclick="Yeni">Yeni</button>
            }
            <button class="btn btn-primary btn-lg" id="submitButton" @onclick="Kaydet">@(hareket.CariHareketId > 0 ? "Kaydet" : "Ekle")</button>
            </div>
            @if (!string.IsNullOrEmpty(hata))
            {
                <div class="alert alert-danger" role="alert">
                    @hata
                </div>
            }
        </div>
    </AuthorizeView>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />


    @if (hareketler != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Tarih</th>
                    <th>Aciklama</th>
                    <th>Borc</th>
                    <th>Alacak</th>
                    <th>VadeTarihi</th>
                    <AuthorizeView Roles="CanEditData">
                        <th class="d-print-none">İşlemler</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in hareketler)
                {
                    <tr>
                        <td>@item.CariHareketId</td>
                        <td>@item.Tarih</td>
                        <td>@item.Aciklama</td>
                        <td>@item.Borc</td>
                        <td>@item.Alacak</td>
                        <td>@item.VadeTarihi</td>
                        <AuthorizeView Roles="CanEditData">
                            <td class="d-print-none"  rowspan="@(item.DovizKuruId != null ? "3" : "")">
                                <button class="btn btn-primary" @onclick="()=> Duzenle(item.CariHareketId)">Düzenle</button>
                                <a href="javascript:void();" class="btn btn-danger" @onclick="() => ShowSilDlg(item.CariHareketId)">Sil</a>
                            </td>
                        </AuthorizeView>
                    </tr>
                    if (item.DovizKuruId!= null)
                    {
                        <tr>
                            <td>Doviz</td>
                            <td>Alış/Satış</td>
                            <td>BorcDovizAlis</td>
                            <td>BorcDovizSatis</td>
                            <td>AlacakDovizAlis</td>
                            <td>AlacakDovizSatis</td>
                        </tr>

                        <tr>
                            <td>@item.DovizAdi (@item.DovizCinsi)</td>
                            <td>@item.DovizKuruAlis/@item.DovizKuruSatis</td>
                            <td>@item.BorcDovizAlis</td>
                            <td>@item.BorcDovizSatis</td>
                            <td>@item.AlacakDovizAlis</td>
                            <td>@item.AlacakDovizSatis</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" ExtraClass="d-print-none"/>

        <AuthorizeView Roles="CanEditData">
            <ModalForm @ref="silDlg" Title="Silme işlemini onayla">
                <Body>
                @{
                    var titleText = $"Silinecek Kaydın ID'sini <span class='btn btn-danger'>{silinecekId}</span> buraya tekrar yazın";
                 }
                    <TextBox @bind-Data="silinecekIdValidate" Title="@titleText" />
                </Body>
                <Footer>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Sil">Sil</button>
                </Footer>
            </ModalForm>
        </AuthorizeView>

    }
}

@*https://www.meziantou.net/anchor-navigation-in-a-blazor-application.htm*@


@code {
    [Parameter]
    public int Id { get; set; }
    private CariKart? cariKart;
    private List<CariHareketWrapper>? hareketler;
    private List<DovizKuru>? dovizKurlari;
    private CariHareket hareket = new CariHareket();
    private string? hata;

    [CascadingParameter(Name = "userCariKartId")]
    private int? cariKartIdOnly { get; set; }

    ModalForm silDlg;
    private int silinecekId = -1;
    private int silinecekIdValidate = 0;



    private void ShowSilDlg(int id)
    {
        silinecekId = id;
        silDlg.Open();
    }

    private void Sil()
    {
        if (silinecekIdValidate == silinecekId)
        {
            using (var db = new DB())
            {
                var har = db.CariHareket.Where(x => x.CariHareketId == silinecekId);
                db.CariHareket.RemoveRange(har);
                db.SaveChanges();
            }
            silinecekId = -1;
            silinecekIdValidate = 0;
            silDlg.Close();
            RefreshList();
        }

    }


    private void Duzenle(int id)
    {
        hareket = hareketler.First(x => x.CariHareketId == id).ToCariHareket();
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
        JS.InvokeVoidAsync("jump", "cariekle");
    }

    private void Yeni()
    {
        hareket = new CariHareket();

    }

    private void Kaydet()
    {
        hata = null;
        if (hareket == null || cariKart == null)
        {
            hata = $"Ri tı siya-o h:{hareket == null} m:{cariKart == null}";
        }
        else if (hareket.Borc <= 0 && hareket.Alacak <= 0)
        {
            hata = "Borç veya alacak belirtiniz.";
        }
        else if (hareket.Tarih == null)
        {
            hata = "Tarih belirtiniz";
        }
        else if (hareket.VadeTarihi != null && hareket.VadeTarihi < hareket.Tarih)
        {
            hata = "Vade tarihi işlem tarihinden eski olamaz!";
        }
        else
        {
            if (hareket.CariHareketId > 0)
            {
                hareket.CariKartId = cariKart.CariKartId;
                using (var db = new DB())
                {
                    var exists = db.CariHareket.FirstOrDefault(x => x.CariHareketId == hareket.CariHareketId);
                    if (exists != null)
                    {
                        exists.Fill(hareket);
                        db.SaveChanges();
                    }
                    else
                    {
                        hata = "Kayıt bulunamadı! Başka bir ekranda veya kullanıcı tarafından silinmiş olabilir...";
                    }
                }
            }
            else
            {
                hareket.CariKartId = cariKart.CariKartId;
                using (var db = new DB())
                {
                    db.CariHareket.Add(hareket);
                    db.SaveChanges();
                }

            }
            RefreshList();
            Yeni();

        }

    }

    private void RefreshList()
    {
        using (var db = new DB())
        {
            dovizKurlari = db.DovizKuru.AsNoTracking().ToList();
            dovizKurlari.Insert(0, new DovizKuru() { DovizKuruId = 0, DovizAdi = "TL", DovizCinsi = "TRY" });
            cariKart =
            (
                cariKartIdOnly != null
                    ? db.CariKart.AsNoTracking().Where(x => x.CariKartId == cariKartIdOnly)
                    : db.CariKart.AsNoTracking()
            )
            // .Include(x => x.Hareketler)
            .Where(x => x.CariKartId == Id)
            .FirstOrDefault();

            if (cariKart != null)
            {
                hareketler = db.CariHareket
                    .Where(x => x.CariKartId == cariKart.CariKartId)
                    .Include(x => x.DovizKuru)
                    .OrderByDescending(x => x.Tarih)
                    .ThenBy(x => x.VadeTarihi)
                    .ThenByDescending(x => x.CariHareketId)
                    .Select(x => new CariHareketWrapper(x))
                    .ToList();
            }
        }
        InvokeAsync(() => StateHasChanged());

    }


    protected override async Task OnInitializedAsync()
    {
        RefreshList();
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    RefreshList();
    //}
}
