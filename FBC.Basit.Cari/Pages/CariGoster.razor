@page "/cari/goster/{Id:int}"
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@using FBC.Components;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS


@if (model == null)
{
    <PageTitle>Cari Göster - Kayıt Bulunamadı!</PageTitle>
    <h1>Kayıt Bulunamadı!</h1>
}
else
{
    var toplamBorc = model.Hareketler.Sum(x => x.Borc);
    var toplamAlacak = model.Hareketler.Sum(x => x.Alacak);

    <PageTitle>@model.Isim - Cari Göster</PageTitle>
    <h1 id="cariekle">@model.Isim</h1>
    <AuthorizeView Roles="CanEditData">
        <div class="container px-5 my-5">
            <div class="row">
                <DatePicker @bind-Data="hareket.Tarih" FormPanelExtraClass="col" Title="Tarih" />
                <DatePicker @bind-Data="hareket.VadeTarihi" FormPanelExtraClass="col" Title="VadeTarihi" />
            </div>
            <TextBox @bind-Data="hareket.Aciklama" Title="Aciklama" />
            <div class="row">
                <TextBox @bind-Data="hareket.Borc" FormPanelExtraClass="col" Title="Borc" />
                <TextBox @bind-Data="hareket.Alacak" FormPanelExtraClass="col" Title="Alacak" />
            </div>

            <div class="d-grid">
                @if (hareket.CariHareketId > 0)
                {
                    <button class="btn alert-secondary btn-lg py-1" id="submitButton" @onclick="Yeni">Yeni</button>
                }
                <button class="btn btn-primary btn-lg" id="submitButton" @onclick="Kaydet">@(hareket.CariHareketId>0 ?"Kaydet":"Ekle")</button>
            </div>
            @if (!string.IsNullOrEmpty(hata))
            {
                <div class="alert alert-danger" role="alert">
                    @hata
                </div>
            }
        </div>
    </AuthorizeView>
    <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />


    @if (model.Hareketler != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Tarih</th>
                    <th>Aciklama</th>
                    <th>Borc</th>
                    <th>Alacak</th>
                    <th>VadeTarihi</th>
                    <AuthorizeView Roles="CanEditData">
                        <th>İşlemler</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in model.Hareketler)
                {
                    <tr>
                        <td>@item.CariHareketId</td>
                        <td>@item.Tarih</td>
                        <td>@item.Aciklama</td>
                        <td>@item.Borc</td>
                        <td>@item.Alacak</td>
                        <td>@item.VadeTarihi</td>
                        <AuthorizeView Roles="CanEditData">
                            <td>
                                <button class="btn btn-primary" @onclick="()=> Duzenle(item.CariHareketId)">Düzenle</button>
                                <a href="javascript:void();" class="btn btn-danger" @onclick="() => ShowSilDlg(item.CariHareketId)">Sil</a>

                            </td>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>
        <CariOzet @bind-ToplamBorc="toplamBorc" @bind-ToplamAlacak="toplamAlacak" />

        <AuthorizeView Roles="CanEditData">
            <ModalForm @ref="silDlg" Title="Silme işlemini onayla">
                <Body>
                    @{
                        var titleText = $"Silinecek Kaydın ID'sini <span class='btn btn-danger'>{silinecekId}</span> buraya tekrar yazın";
                    }
                    <TextBox @bind-Data="silinecekIdValidate" Title="@titleText" />
                </Body>
                <Footer>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Sil">Sil</button>
                </Footer>
            </ModalForm>
        </AuthorizeView>

    }
}

@*https://www.meziantou.net/anchor-navigation-in-a-blazor-application.htm*@


@code {
    [Parameter]
    public int Id { get; set; }
    private CariKart? model;
    private CariHareket hareket = new CariHareket();
    private string? hata;

    private int? cariKartIdOnly = null;

    private async Task<int?> getCariKartIdOnly()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string id = user.FindFirst(c => c.Type == "CariKartId")?.Value;

            if (!string.IsNullOrEmpty(id))
            {
                return int.Parse(id);
            }
        }
        return null;
    }

    ModalForm silDlg;
    private int silinecekId = -1;
    private int silinecekIdValidate = 0;



    private void ShowSilDlg(int id)
    {
        silinecekId = id;
        silDlg.Open();
    }

    private void Sil()
    {
        if (silinecekIdValidate == silinecekId)
        {
            using (var db = new DB())
            {
                var har = db.CariHareket.Where(x => x.CariHareketId == silinecekId);
                db.CariHareket.RemoveRange(har);
                db.SaveChanges();
            }
            silinecekId = -1;
            silinecekIdValidate = 0;
            silDlg.Close();
            RefreshList();
        }

    }


    private void Duzenle(int id)
    {
        hareket = model.Hareketler.First(x => x.CariHareketId == id);
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
        JS.InvokeVoidAsync("jump", "cariekle");
    }

    private void Yeni()
    {
        hareket = new CariHareket();

    }

    private void Kaydet()
    {
        hata = null;
        if (hareket == null || model == null)
        {
            hata = $"Ri tı siya-o h:{hareket == null} m:{model == null}";
        }
        else if (hareket.Borc <= 0 && hareket.Alacak <= 0)
        {
            hata = "Borç veya alacak belirtiniz.";
        }
        else if (hareket.Tarih == null)
        {
            hata = "Tarih belirtiniz";
        }
        else if (hareket.VadeTarihi != null && hareket.VadeTarihi < hareket.Tarih)
        {
            hata = "Vade tarihi işlem tarihinden eski olamaz!";
        }
        else
        {
            if (hareket.CariHareketId > 0)
            {

                hareket.CariKartId = model.CariKartId;
                using (var db = new DB())
                {
                    var exists = db.CariHareket.FirstOrDefault(x => x.CariHareketId == hareket.CariHareketId);
                    if (exists != null)
                    {
                        exists.Fill(hareket);
                        db.SaveChanges();
                    }
                    else
                    {
                        hata = "Kayıt bulunamadı! Başka bir ekranda veya kullanıcı tarafından silinmiş olabilir...";
                    }
                }
            }
            else
            {

                hareket.CariKartId = model.CariKartId;
                using (var db = new DB())
                {

                    db.CariHareket.Add(hareket);
                    db.SaveChanges();
                }

            }
            RefreshList();
            Yeni();

        }

    }

    private void RefreshList()
    {
        using (var db = new DB())
        {
            model =
            (
                cariKartIdOnly != null
                    ? db.CariKart.AsNoTracking().Where(x => x.CariKartId == cariKartIdOnly)
                    : db.CariKart.AsNoTracking()
            )


            .Include(x => x.Hareketler)
            .Where(x => x.CariKartId == Id)
            .FirstOrDefault();

            if (model != null && model.Hareketler != null)
            {
                model.Hareketler = model.Hareketler
                .OrderByDescending(x => x.Tarih)
                .ThenBy(x => x.VadeTarihi)
                .ThenByDescending(x => x.CariHareketId)
                .ToList();
            }
        }
        InvokeAsync(() => StateHasChanged());

    }


    protected override async Task OnInitializedAsync()
    {
        cariKartIdOnly = await getCariKartIdOnly();
        RefreshList();
    }
}
