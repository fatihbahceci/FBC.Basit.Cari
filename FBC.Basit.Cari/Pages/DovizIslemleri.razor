@page "/DovizIslemleri"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@using FBC.Components;
@using System.Xml
@inject IJSRuntime JS
@inject NotificationService NTF
@inject DialogService DLG

<h3>DovizIslemleri</h3>
<id id="kullaniciekle" />
<div class="container px-5 my-5">
    <div class="row">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
            <RadzenLabel Text="DovizCinsi" />
            <RadzenTextBox @bind-Value="DovizKuru.DovizCinsi" Placeholder="DovizCinsi" Style="width: 100%" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
            <RadzenLabel Text="DovizAdi" />
            <RadzenTextBox @bind-Value="DovizKuru.DovizAdi" Placeholder="DovizAdi" Style="width: 100%" />
        </RadzenStack>
    </div>
    <div class="row">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
            <RadzenLabel Text="GuncelKurAlis" />
            <RadzenNumeric @bind-Value="DovizKuru.GuncelKurAlis" Title="GuncelKurAlis" Style="width: 100%" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">
            <RadzenLabel Text="GuncelKurSatis" />
            <RadzenNumeric @bind-Value="DovizKuru.GuncelKurSatis" Title="GuncelKurSatis" Style="width: 100%" />
        </RadzenStack>
    </div>

    <div class="d-grid">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.5rem" class="col">

            @if (DovizKuru.DovizKuruId > 0)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="Yeni" >Yeni</RadzenButton>
            }
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="Kaydet">@(DovizKuru.DovizKuruId > 0 ? "Kaydet" : "Ekle")</RadzenButton>
            <RadzenCheckBox TValue="bool" Change="MerkezBankasindanOlmayanlariDaGetir" Name="Dilruba" />
            <RadzenLabel Text="Eğer döviz kayıtlı değilse yeni kayıt oluştur" Component="Dilruba"  />
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="MerkezBankasindanAl">İnternet'ten güncelle</RadzenButton>
        </RadzenStack>
    </div>
    @if (!string.IsNullOrEmpty(hata))
    {
        <RadzenAlert Severity="AlertSeverity.Warning" AlertStyle="AlertStyle.Danger" AllowClose="false">
            @hata
        </RadzenAlert>
    }
</div>
@if (DovizKurlari != null && DovizKurlari.Any())
{
    <RadzenDataList Data="DovizKurlari">
        <Template Context="x">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenLabel Text="@(""+ x.DovizKuruId)" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="@x.DovizCinsi" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="@x.DovizAdi" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="Alış" />
                    <RadzenLabel Text="@(string.Format("{0:C}", x.GuncelKurAlis))" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="Satış" />
                    <RadzenLabel Text="@(string.Format("{0:C}", +x.GuncelKurSatis))" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="Güncelleme" />
                    <RadzenLabel Text="@(""+x.GuncellemeTarihi)" />
                </RadzenColumn>
                <AuthorizeView Roles="Admin">
                    <RadzenColumn>
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Düzenle" Click="() => Duzenle(x.DovizKuruId)" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Sil" Click="() => ShowSilDlg(x.DovizKuruId)" />
                    </RadzenColumn>
                </AuthorizeView>
            </RadzenRow>
        </Template>
    </RadzenDataList>
}
else
{
    <RadzenAlert Severity="AlertSeverity.Warning" AlertStyle="AlertStyle.Danger" AllowClose="false">
        @(ozelMesaj ?? "Kayıt bulunamadı!")
    </RadzenAlert>
}

@code {
    private List<DovizKuru> DovizKurlari { get; set; } = new List<DovizKuru>();
    private DovizKuru DovizKuru { get; set; } = new DovizKuru();
    private string? hata;
    private string? ozelMesaj = null;
    private bool merkezBankasindanOlmayanlariDaGetir = false;
    private void MerkezBankasindanOlmayanlariDaGetir(bool paca)
    {
        merkezBankasindanOlmayanlariDaGetir = paca;
        // grid?.Reload();
    }
    #region Kullanıcıları Listele

    private void RefreshList()
    {
        using (var db = new DB())
        {
            DovizKurlari = db.DovizKuru.AsNoTracking()
            .ToList();

        }
        Yeni();
        InvokeAsync(() => StateHasChanged());

    }


    protected override async Task OnInitializedAsync()
    {
        RefreshList();
    }
    #endregion

    #region Sil

    private async Task ShowSilDlg(int id)
    {
        hata = null;
        var r = await DLG.OpenAsync<FBC.Components.ConfirmDeleteDlg>(
            "Silmek istediğinize emin misiniz?",
            new Dictionary<string, object> { { "Id", id } });
        try
        {
            if (r is bool b && b == true)
            {

                using (var db = new DB())
                {
                    var hasTransaction = db.CariHareket.Where(x => x.DovizKuruId == id).Any();
                    if (hasTransaction)
                    {
                        hata = "Bu döviz ile işlem yapılmış. Silinemez!";
                    }
                    else
                    {
                        var exists = db.DovizKuru.FirstOrDefault(x => x.DovizKuruId == id);
                        if (exists != null)
                        {
                            db.DovizKuru.Remove(exists);
                            db.SaveChanges();
                            NTF.Notify(NotificationSeverity.Success, "Başarılı", "Kayıt silindi");
                            hata = null;
                            RefreshList();
                        }
                        else
                        {
                            hata = "Kayıt bulunamadı!";
                        }
                    }
                }
            }
        }
        catch (Exception exc)
        {
            NTF.Notify(NotificationSeverity.Error, "Hata!", exc.Message);
        }
    }

    #endregion

    #region Ekle / Düzenle

    private void Duzenle(int id)
    {
        hata = null;
        using (var db = new DB())
        {
            DovizKuru = db.DovizKuru.AsNoTracking()
            .Where(x => x.DovizKuruId == id).FirstOrDefault() ?? new DovizKuru();
        }
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
        JS.InvokeVoidAsync("jump", "kullaniciekle");
    }

    private void Yeni()
    {
        hata = null;
        DovizKuru = new DovizKuru();
    }

    private void HareketiDeKaydet(DB db, DovizKuru dovizKuru, string kaynak)
    {
        db.DovizKuruHareket.Add(
            new DovizKuruHareket
                {
                    Tarih = dovizKuru.GuncellemeTarihi,
                    Alis = dovizKuru.GuncelKurAlis,
                    Satis = dovizKuru.GuncelKurSatis,
                    Kaynak = kaynak,
                    DovizKuruId = dovizKuru.DovizKuruId
                });
        db.SaveChanges();
    }

    private void Kaydet()
    {
        hata = null;
        if (DovizKuru == null)
        {
            hata = "Ri tı siya-o";
        }
        else if (string.IsNullOrEmpty(DovizKuru.DovizCinsi))
        {
            hata = "Döviz cinsi boş olamaz!";
        }
        else if (string.IsNullOrEmpty(DovizKuru.DovizAdi))
        {
            hata = "Döviz adı boş olamaz!";
        }
        else if (DovizKuru.GuncelKurAlis <= 0)
        {
            hata = "Geçersiz alış kuru!";
        }
        else if (DovizKuru.GuncelKurSatis <= 0)
        {
            hata = "Geçersiz satış kuru!";
        }
        else if (DovizKuru.GuncelKurAlis >= DovizKuru.GuncelKurSatis)
        {
            hata = "Alış kuru satış kurundan büyük veya eşit olamaz!";
        }
        else
        {
            //Edit
            if (DovizKuru.DovizKuruId > 0)
            {
                using (var db = new DB())
                {
                    var anotherIdExists = db.DovizKuru.Where(x =>
                        x.DovizKuruId != DovizKuru.DovizKuruId && x.DovizCinsi == DovizKuru.DovizCinsi).Any();
                    if (anotherIdExists)
                    {
                        hata = "Bu döviz cinsi zaten var!";
                    }
                    else
                    {
                        var exists = db.DovizKuru.FirstOrDefault(x => x.DovizKuruId == DovizKuru.DovizKuruId);
                        if (exists != null)
                        {
                            exists.Fill(DovizKuru);
                            exists.GuncellemeTarihi = DateTime.Now;
                            db.SaveChanges();
                            HareketiDeKaydet(db, exists, "Manuel güncelleme");
                        }
                        else
                        {
                            hata = "Kayıt bulunamadı! Başka bir ekranda veya kullanıcı tarafından silinmiş olabilir...";
                        }
                    }
                }
            }
            else //Add
            {
                using (var db = new DB())
                {
                    var anotherIdExists = db.DovizKuru.Where(x => x.DovizCinsi == DovizKuru.DovizCinsi).Any();
                    if (anotherIdExists)
                    {
                        hata = "Bu döviz cinsi zaten var!";
                    }
                    else
                    {
                        DovizKuru.GuncellemeTarihi = DateTime.Now;
                        db.DovizKuru.Add(DovizKuru);
                        db.SaveChanges();
                        HareketiDeKaydet(db, DovizKuru, "Manuel Ekleme");

                    }
                }

            }
            RefreshList();
            Yeni();
        }

    }
    #endregion

    private async void ApplyDovizKuru(IEnumerable<DovizKuru> kurlar, string source)
    {
        using (var db = new DB())
        {
            foreach (var kur in kurlar)
            {
                var exists = db.DovizKuru.FirstOrDefault(x => x.DovizCinsi == kur.DovizCinsi);
                if (exists != null)
                {
                    exists.GuncelKurAlis = kur.GuncelKurAlis;
                    exists.GuncelKurSatis = kur.GuncelKurSatis;
                    // exists.Fill(kur);
                    exists.GuncellemeTarihi = DateTime.Now;
                    db.SaveChanges();
                    HareketiDeKaydet(db, exists, source);
                }
                else if (merkezBankasindanOlmayanlariDaGetir)
                {
                    var nw = new DovizKuru
                        {
                            DovizCinsi = kur.DovizCinsi,
                            DovizAdi = kur.DovizAdi,
                            GuncelKurAlis = kur.GuncelKurAlis,
                            GuncelKurSatis = kur.GuncelKurSatis,
                            GuncellemeTarihi = DateTime.Now
                        };
                    db.DovizKuru.Add(nw);
                    db.SaveChanges();
                    HareketiDeKaydet(db, nw, $"{source} (Yeni)");
                }
            }
        }
    }

    private async void MerkezBankasindanAl()
    {
        ozelMesaj = "Merkez Bankası'ndan güncel kur bilgileri alınıyor...";
        DovizKurlari = new List<DovizKuru>();
        var kurlar = Helper.MerkezBankasindanAl().ToList();
        ApplyDovizKuru(kurlar, "Merkez Bankası");
        try
        {
            var altinlar = await Helper.AltinInDenAlAsync();
            ApplyDovizKuru(altinlar, "altin.in");
        }
        catch { }

        RefreshList();
    }
}
