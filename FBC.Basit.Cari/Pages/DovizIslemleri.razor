@page "/DovizIslemleri"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
@using FBC.Components;
@using System.Xml
@inject IJSRuntime JS
<h3>DovizIslemleri</h3>
<id id="kullaniciekle" />
<div class="container px-5 my-5">
    <div class="row">
        <TextBox @bind-Data="DovizKuru.DovizCinsi" FormPanelExtraClass="col" Title="DovizCinsi" />
        <TextBox @bind-Data="DovizKuru.DovizAdi" FormPanelExtraClass="col" Title="DovizAdi" />
    </div>
    <div class="row">
        <TextBox @bind-Data="DovizKuru.GuncelKurAlis" FormPanelExtraClass="col" Title="GuncelKurAlis" />
        <TextBox @bind-Data="DovizKuru.GuncelKurSatis" FormPanelExtraClass="col" Title="GuncelKurSatis" />
    </div>

    <div class="d-grid">
        @if (DovizKuru.DovizKuruId > 0)
        {
            <button class="btn alert-secondary btn-lg py-1" id="submitButton" @onclick="Yeni">Yeni</button>
        }
        <button class="btn btn-primary btn-lg" id="submitButton" @onclick="Kaydet">@(DovizKuru.DovizKuruId > 0 ? "Kaydet" : "Ekle")</button>
    </div>
    @*     <div>
    <small class="text-muted">Son güncelleme: @DovizKuru.GuncellemeTarihi</small>
    </div> *@
    <div class="row">
        <CheckBox @bind-Data="merkezBankasindanOlmayanlaridaGetir" Title="Eğer döviz kayıtlı değilse yeni kayıt oluştur" />
    </div>
    <div class="d-grid">
        <button class="btn btn-success btn-lg" @onclick="MerkezBankasindanAl">İnternet'ten güncelle</button>
    </div>
    @if (!string.IsNullOrEmpty(hata))
    {
        <div class="alert alert-danger" role="alert">
            @hata
        </div>
    }
</div>
@if (DovizKurlari != null && DovizKurlari.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>DovizCinsi</th>
                <th>DovizAdi</th>
                <th>GuncelKurAlis</th>
                <th>GuncelKurSatis</th>
                <th>GuncellemeTarihi</th>
                <AuthorizeView Roles="Admin">
                    <th class="d-print-none">İşlemler</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in DovizKurlari)
            {
                <tr>
                    <td>@item.DovizKuruId</td>
                    <td>@item.DovizCinsi</td>
                    <td>@item.DovizAdi</td>
                    <td>@item.GuncelKurAlis</td>
                    <td>@item.GuncelKurSatis</td>
                    <td>@item.GuncellemeTarihi</td>
                    <AuthorizeView Roles="Admin">
                        <td class="d-print-none">
                            <button class="btn btn-primary" @onclick="()=> Duzenle(item.DovizKuruId)">Düzenle</button>
                            <a href="javascript:void();" class="btn btn-danger" @onclick="() => ShowSilDlg(item.DovizKuruId)">Sil</a>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>

    <AuthorizeView Roles="CanEditData">
        <ModalForm @ref="silDlg" Title="Silme işlemini onayla">
            <Body>
                @{
                    var titleText = $"Silinecek Kaydın ID'sini <span class='btn btn-danger'>{silinecekId}</span> buraya tekrar yazın";
                }
                <TextBox @bind-Data="silinecekIdValidate" Title="@titleText" />
            </Body>
            <Footer>
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Sil">Sil</button>
            </Footer>
        </ModalForm>
    </AuthorizeView>

}
else
{
    <div class="alert alert-warning" role="alert">
        @(ozelMesaj ?? "Kayıt bulunamadı!")
    </div>

}

@code {
    private List<DovizKuru> DovizKurlari { get; set; } = new List<DovizKuru>();
    private DovizKuru DovizKuru { get; set; } = new DovizKuru();
    private string? hata;
    private string? ozelMesaj = null;
    private bool merkezBankasindanOlmayanlaridaGetir = false;
    #region Kullanıcıları Listele

    private void RefreshList()
    {
        using (var db = new DB())
        {
            DovizKurlari = db.DovizKuru.AsNoTracking()
            .ToList();

        }
        Yeni();
        InvokeAsync(() => StateHasChanged());

    }


    protected override async Task OnInitializedAsync()
    {
        RefreshList();
    }
    #endregion

    #region Sil
    ModalForm silDlg;
    private int silinecekId = -1;
    private int silinecekIdValidate = 0;

    private void ShowSilDlg(int id)
    {
        hata = null;
        silinecekId = id;
        silDlg.Open();
    }

    private void Sil()
    {
        if (silinecekIdValidate == silinecekId)
        {
            using (var db = new DB())
            {
                var hasTransaction = db.CariHareket.Where(x => x.DovizKuruId == silinecekId).Any();
                if (hasTransaction)
                {
                    hata = "Bu döviz ile işlem yapılmış. Silinemez!";
                }
                else
                {
                    var exists = db.DovizKuru.FirstOrDefault(x => x.DovizKuruId == silinecekId);
                    if (exists != null)
                    {
                        db.DovizKuru.Remove(exists);
                        db.SaveChanges();
                        silinecekId = -1;
                        silinecekIdValidate = 0;
                        silDlg.Close();
                        RefreshList();
                    }
                }
            }
        }

    }

    #endregion

    #region Ekle / Düzenle

    private void Duzenle(int id)
    {
        using (var db = new DB())
        {
            DovizKuru = db.DovizKuru.AsNoTracking()
            .Where(x => x.DovizKuruId == id).FirstOrDefault() ?? new DovizKuru();
        }
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
        JS.InvokeVoidAsync("jump", "kullaniciekle");
    }

    private void Yeni()
    {
        DovizKuru = new DovizKuru();
    }

    private void HareketiDeKaydet(DB db, DovizKuru dovizKuru, string kaynak)
    {
        db.DovizKuruHareket.Add(
            new DovizKuruHareket
                {
                    Tarih = dovizKuru.GuncellemeTarihi,
                    Alis = dovizKuru.GuncelKurAlis,
                    Satis = dovizKuru.GuncelKurSatis,
                    Kaynak = kaynak,
                    DovizKuruId = dovizKuru.DovizKuruId
                });
        db.SaveChanges();
    }

    private void Kaydet()
    {
        hata = null;
        if (DovizKuru == null)
        {
            hata = "Ri tı siya-o";
        }
        else if (string.IsNullOrEmpty(DovizKuru.DovizCinsi))
        {
            hata = "Döviz cinsi boş olamaz!";
        }
        else if (string.IsNullOrEmpty(DovizKuru.DovizAdi))
        {
            hata = "Döviz adı boş olamaz!";
        }
        else if (DovizKuru.GuncelKurAlis <= 0)
        {
            hata = "Geçersiz alış kuru!";
        }
        else if (DovizKuru.GuncelKurSatis <= 0)
        {
            hata = "Geçersiz satış kuru!";
        }
        else if (DovizKuru.GuncelKurAlis >= DovizKuru.GuncelKurSatis)
        {
            hata = "Alış kuru satış kurundan büyük veya eşit olamaz!";
        }
        else
        {
            //Edit
            if (DovizKuru.DovizKuruId > 0)
            {
                using (var db = new DB())
                {
                    var anotherIdExists = db.DovizKuru.Where(x =>
                        x.DovizKuruId != DovizKuru.DovizKuruId && x.DovizCinsi == DovizKuru.DovizCinsi).Any();
                    if (anotherIdExists)
                    {
                        hata = "Bu döviz cinsi zaten var!";
                    }
                    else
                    {
                        var exists = db.DovizKuru.FirstOrDefault(x => x.DovizKuruId == DovizKuru.DovizKuruId);
                        if (exists != null)
                        {
                            exists.Fill(DovizKuru);
                            exists.GuncellemeTarihi = DateTime.Now;
                            db.SaveChanges();
                            HareketiDeKaydet(db, exists, "Manuel güncelleme");
                        }
                        else
                        {
                            hata = "Kayıt bulunamadı! Başka bir ekranda veya kullanıcı tarafından silinmiş olabilir...";
                        }
                    }
                }
            }
            else //Add
            {
                using (var db = new DB())
                {
                    var anotherIdExists = db.DovizKuru.Where(x => x.DovizCinsi == DovizKuru.DovizCinsi).Any();
                    if (anotherIdExists)
                    {
                        hata = "Bu döviz cinsi zaten var!";
                    }
                    else
                    {
                        DovizKuru.GuncellemeTarihi = DateTime.Now;
                        db.DovizKuru.Add(DovizKuru);
                        db.SaveChanges();
                        HareketiDeKaydet(db, DovizKuru, "Manuel Ekleme");

                    }
                }

            }
            RefreshList();
            Yeni();
        }

    }
    #endregion

    private async void ApplyDovizKuru(IEnumerable<DovizKuru> kurlar, string source)
    {
        using (var db = new DB())
        {
            foreach (var kur in kurlar)
            {
                var exists = db.DovizKuru.FirstOrDefault(x => x.DovizCinsi == kur.DovizCinsi);
                if (exists != null)
                {
                    exists.GuncelKurAlis = kur.GuncelKurAlis;
                    exists.GuncelKurSatis = kur.GuncelKurSatis;
                    // exists.Fill(kur);
                    exists.GuncellemeTarihi = DateTime.Now;
                    db.SaveChanges();
                    HareketiDeKaydet(db, exists, source);
                }
                else if (merkezBankasindanOlmayanlaridaGetir)
                {
                    var nw = new DovizKuru
                        {
                            DovizCinsi = kur.DovizCinsi,
                            DovizAdi = kur.DovizAdi,
                            GuncelKurAlis = kur.GuncelKurAlis,
                            GuncelKurSatis = kur.GuncelKurSatis,
                            GuncellemeTarihi = DateTime.Now
                        };
                    db.DovizKuru.Add(nw);
                    db.SaveChanges();
                    HareketiDeKaydet(db, nw, $"{source} (Yeni)");
                }
            }
        }
    }

    private async void MerkezBankasindanAl()
    {
        ozelMesaj = "Merkez Bankası'ndan güncel kur bilgileri alınıyor...";
        DovizKurlari = new List<DovizKuru>();
        var kurlar = Helper.MerkezBankasindanAl().ToList();
        ApplyDovizKuru(kurlar, "Merkez Bankası");
        try
        {
            var altinlar = await Helper.AltinInDenAlAsync();
            ApplyDovizKuru(altinlar, "altin.in");
        }
        catch { }

        RefreshList();
    }
}
