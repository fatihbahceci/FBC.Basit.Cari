@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase


<PageTitle>FBC.Basit.Cari</PageTitle>

@*<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>
    @if (_claims.Count() > 0)
    {
    <ul>
    @foreach (var claim in _claims)
    {
    <li>@claim.Type: @claim.Value</li>
    }
    </ul>
    }

    <p>@_surnameMessage</p>
*@

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <span class="badge rounded-pill bg-primary">@userTitle</span>
                    <a class="badge rounded-pill bg-dark" href="/Logout">Çıkış</a>
                </Authorized>
                <NotAuthorized>
                    <a href="/Login">Giriş</a>

                </NotAuthorized>
            </AuthorizeView>
            <a href="javascript:void(0);" @onclick="()=> {showVersion = !showVersion;}">@(showVersion ?TypeHelper.GetAppVersionInfo():"?")</a>
        </div>

        <CascadingValue Value="userCariKartId" Name="userCariKartId">
            <article class="content px-4">
                @Body
            </article>
        </CascadingValue>
    </main>
</div>


@code {
    private string userTitle { get; set; } = "";
    private int? userCariKartId { get; set; }
    private bool showVersion = false;
    [CascadingParameter]
    private Task<AuthenticationState> aState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await aState;
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            string? name = user?.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            string? surname = user?.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            string? userName = user?.FindFirst(c => c.Type == ClaimTypes.Sid)?.Value;
            userTitle = $"{name} {surname} ({userName}) ";
            string? id = user?.FindFirst(c => c.Type == "CariKartId")?.Value;

            if (!string.IsNullOrEmpty(id))
            {
                userCariKartId = int.Parse(id);
            }
            else
            {
                //Tüm kayıtları dön
                userCariKartId = null;
            }
        }
        else
        {
            userTitle = "";
            //Boş kayıt dön (tüm idler sıfırdan büyük olacağı için)
            userCariKartId = -1;
        }
        //InvokeAsync(() => StateHasChanged());
        StateHasChanged();

    }

    //private string _authMessage;
    //private string _surnameMessage;
    //private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    //private async Task GetClaimsPrincipalData()
    //{
    //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    var user = authState.User;

    //    if (user.Identity.IsAuthenticated)
    //    {
    //        _authMessage = $"{user.Identity.Name} is authenticated.";
    //        _claims = user.Claims;
    //        _surnameMessage =
    //            $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
    //    }
    //    else
    //    {
    //        _authMessage = "The user is NOT authenticated.";
    //    }
    //}


}