@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<PageTitle>FBC.Basit.Cari</PageTitle>

<RadzenLayout>
    <CascadingValue Value="userCariKartId" Name="userCariKartId">
        <CascadingValue Value="sidebar1Expanded" Name="SidebarState">
            <RadzenHeader>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                    <AuthorizeView>
                        <Authorized>
                            <RadzenLabel Text="@userTitle" />
                        </Authorized>
                        <NotAuthorized>
                            <RadzenLabel Text="FBC.Basit.Cari" />
                        </NotAuthorized>
                    </AuthorizeView>
                </RadzenStack>
            </RadzenHeader>
            <NavMenu />
            <RadzenBody>
                <div class="rz-p-4">
                    @Body
                </div>
            </RadzenBody>
            <RadzenFooter>
                <RadzenText Text="@TypeHelper.GetAppVersionInfo()" />
            </RadzenFooter>
        </CascadingValue>
    </CascadingValue>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;
    private int? userCariKartId { get; set; }
    private string userTitle { get; set; } = "";
    private bool showVersion = false;
    [CascadingParameter]
    private Task<AuthenticationState> aState { get; set; }

    private async Task CheckAuth()
    {
        var authState = await aState;
        var user = authState.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            string? name = user?.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            string? surname = user?.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            string? userName = user?.FindFirst(c => c.Type == ClaimTypes.Sid)?.Value;
            userTitle = $"{name} {surname} ({userName}) ";
            string? id = user?.FindFirst(c => c.Type == "CariKartId")?.Value;

            if (!string.IsNullOrEmpty(id))
            {
                userCariKartId = int.Parse(id);
            }
            else
            {
                //Tüm kayıtları dön
                userCariKartId = null;
            }
        }
        else
        {
            userTitle = "";
            //Boş kayıt dön (tüm idler sıfırdan büyük olacağı için)
            userCariKartId = -1;
        }
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(() => CheckAuth()); //It's important because of sceurity reasons -FBC https://github.com/fatihbahceci/FBC.Basit.Cari/issues/7
    }

    protected override void OnAfterRender(bool firstRender)
    {
        InvokeAsync(() => CheckAuth());
        //base.OnAfterRender(firstRender);
    }
}
